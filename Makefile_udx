# Makefile for Vertica Microstructure UDx with proper Vertica.cpp integration
# Based on Vertica support recommendation and working Add2Ints example
# 
# This fixes the original symbol resolution issues by linking against Vertica.cpp

SDK_HOME?=/opt/vertica/sdk

CXX?=g++
CXXFLAGS:=-I $(SDK_HOME)/include -g -Wall -Wno-unused-value -shared -fPIC -std=c++11
CXXFLAGS+=-D_GLIBCXX_USE_CXX11_ABI=1

SOURCE = vertica_microstructure_udx.cpp
VERTICA_CPP = $(SDK_HOME)/include/Vertica.cpp
TARGET = libmicrostructure_udx.so

all: $(TARGET)

$(TARGET): $(SOURCE)
	@echo "🔨 Building Vertica Microstructure UDx with proper SDK..."
	@echo "📄 Source: $(SOURCE)"
	@echo "🔧 SDK: $(SDK_HOME)"
	@if [ ! -f "$(VERTICA_CPP)" ]; then \
		echo "❌ Vertica.cpp not found at $(VERTICA_CPP)"; \
		echo "⚠️  Please ensure Vertica SDK is installed at $(SDK_HOME)"; \
		echo "💡 For development, you can use: make fallback"; \
		exit 1; \
	fi
	$(CXX) $(CXXFLAGS) -o $(TARGET) $(SOURCE) $(VERTICA_CPP)
	@echo "✅ Built $(TARGET) with Vertica.cpp (no symbol conflicts)"
	@echo "📊 Library size: $$(ls -lh $(TARGET) | awk '{print $$5}')"

# Fallback compilation without real SDK (for development/testing)
fallback:
	@echo "⚠️  Building with fallback approach (development only)..."
	@echo "📦 Creating minimal Vertica.h header..."
	@if [ ! -f "Vertica.h" ]; then \
		echo '#include "$(SDK_HOME)/include/Vertica.h"' > Vertica_fallback.h; \
		echo "// Fallback header created"; \
	fi
	$(CXX) -std=c++11 -fPIC -shared -O2 -Wall -I. -o $(TARGET) $(SOURCE)
	@echo "✅ Fallback build complete (may have symbol issues in production)"

# Test the library symbols
test-symbols:
	@echo "🔍 Checking library symbols..."
	@if [ -f "$(TARGET)" ]; then \
		echo "📋 Exported symbols:"; \
		nm -D $(TARGET) | grep -E "(Factory|vt_)" | head -10; \
		echo ""; \
		echo "📋 Undefined symbols:"; \
		UNDEFINED=$$(nm -D $(TARGET) 2>/dev/null | grep " U " | wc -l); \
		echo "Count: $$UNDEFINED"; \
		if [ $$UNDEFINED -gt 0 ]; then \
			nm -D $(TARGET) 2>/dev/null | grep " U " | head -5; \
		fi; \
	else \
		echo "❌ Library not found. Run 'make' first."; \
	fi

# Install to Vertica lib directory (requires sudo)
install: $(TARGET)
	@echo "📦 Installing to Vertica lib directory..."
	@if [ -d "/opt/vertica/lib" ]; then \
		sudo cp $(TARGET) /opt/vertica/lib/; \
		echo "✅ Installed to /opt/vertica/lib/$(TARGET)"; \
	else \
		echo "⚠️  /opt/vertica/lib not found. Manual installation required."; \
		echo "📋 Copy $(TARGET) to your Vertica-accessible location"; \
	fi

# Create SQL installation script
sql-install: $(TARGET)
	@echo "📝 Creating SQL installation script..."
	@cat > install_udx.sql << 'EOF'
-- Installation script for Vertica Microstructure UDx
-- Generated by Makefile

-- Step 1: Create the library
CREATE OR REPLACE LIBRARY MicrostructureLib AS '/opt/vertica/lib/libmicrostructure_udx.so';

-- Step 2: Create scalar function
CREATE OR REPLACE FUNCTION microstructure_analyze(
    symbol VARCHAR(10),
    timestamp_ns INT,
    price FLOAT,
    size INT,
    exchange INT
) RETURN ROW(
    timestamp_ns INT,
    symbol VARCHAR(10),
    standardized_return FLOAT,
    lee_mykland_stat FLOAT,
    bns_stat FLOAT,
    trade_intensity_zscore FLOAT,
    acd_surprise FLOAT,
    conditional_duration FLOAT,
    jump_detected BOOLEAN,
    trading_signal VARCHAR(10)
) AS LANGUAGE 'C++' 
NAME 'MicrostructureAnalyzerFactory' 
LIBRARY MicrostructureLib;

-- Step 3: Create transform function
CREATE OR REPLACE TRANSFORM FUNCTION batch_microstructure_analyze(
    symbol VARCHAR(10),
    timestamp_ns INT,
    price FLOAT,
    size INT,
    exchange INT
) RETURN TABLE(
    timestamp_ns INT,
    symbol VARCHAR(10),
    standardized_return FLOAT,
    lee_mykland_stat FLOAT,
    bns_stat FLOAT,
    trade_intensity_zscore FLOAT,
    acd_surprise FLOAT,
    conditional_duration FLOAT,
    jump_detected BOOLEAN,
    trading_signal VARCHAR(10)
) AS LANGUAGE 'C++' 
NAME 'BatchMicrostructureAnalyzerFactory' 
LIBRARY MicrostructureLib;

-- Verification
SELECT 'Microstructure UDx installed successfully!' AS status;
EOF
	@echo "✅ Created install_udx.sql"
	@echo "📋 Run: vsql -f install_udx.sql"

clean:
	rm -f $(TARGET) install_udx.sql Vertica_fallback.h

# Help target
help:
	@echo "📚 Vertica Microstructure UDx Makefile"
	@echo ""
	@echo "Targets:"
	@echo "  all          - Build UDx with proper Vertica SDK (default)"
	@echo "  fallback     - Build with fallback approach (development)"
	@echo "  test-symbols - Check library symbols"
	@echo "  install      - Install to Vertica lib directory (requires sudo)"
	@echo "  sql-install  - Generate SQL installation script"
	@echo "  clean        - Remove build artifacts"
	@echo "  help         - Show this help"
	@echo ""
	@echo "Environment Variables:"
	@echo "  SDK_HOME     - Vertica SDK path (default: /opt/vertica/sdk)"
	@echo "  CXX          - C++ compiler (default: g++)"
	@echo ""
	@echo "Key Fix:"
	@echo "  ✅ Links against $(SDK_HOME)/include/Vertica.cpp"
	@echo "  ✅ Resolves vt_throw_exception symbol issues"
	@echo "  ✅ Uses getStringRef().copy() for varchar handling"

.PHONY: all fallback test-symbols install sql-install clean help


